name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean verify

    - name: Check if target folder exists
      shell: bash
      run: |
        echo "Current working directory: $(pwd)"
        echo "Listing current directory contents:"
        ls -la
        if [ -d "target" ]; then
          echo "The target folder exists."
          ls -la target
        else
          echo "The target folder does not exist."
          exit 1
        fi

    - name: List contents of target folder
      run: |
        if [ -d "target" ]; then
          echo "Listing contents of target and its subdirectories:"
          find target
        else
          echo "The target folder does not exist."
        fi

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: target/site/jacoco/

    - name: Run OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      continue-on-error: false

    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: target/dependency-check-report.html

    - name: Check Test Coverage
      run: |
        echo "Starting test coverage check..."
        
        # Check if the directory exists
        if [ ! -d "target/site/jacoco" ]; then
          echo "JaCoCo directory not found at target/site/jacoco"
          ls -la target/site || echo "target/site directory not found"
          exit 1
        fi
        
        # Check if the file exists
        if [ ! -f "target/site/jacoco/index.html" ]; then
          echo "JaCoCo report not found at target/site/jacoco/index.html"
          ls -la target/site/jacoco || echo "target/site/jacoco directory not found"
          exit 1
        fi
        
        # Extract coverage using the correct HTML format
        COVERAGE=$(grep -o 'Total.*<td class="ctr2">[0-9]\+%</td>' target/site/jacoco/index.html | grep -o '[0-9]\+%' | tr -d '%')
        
        if [ -z "$COVERAGE" ]; then
          echo "Failed to extract coverage percentage"
          echo "Content of index.html:"
          cat target/site/jacoco/index.html
          exit 1
        fi
        
        echo "Extracted coverage: $COVERAGE%"
        
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Test coverage is below 80% (current: $COVERAGE%)"
          exit 1
        fi
        
        echo "Test coverage check passed: $COVERAGE%"

    - name: Run SonarQube Analysis
      uses: SonarSource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=trade-store
          -Dsonar.java.binaries=target/classes
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          -Dsonar.dependencyCheck.reportPath=target/dependency-check-report.html
          -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

    - name: Check SonarQube Analysis Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "SonarQube analysis completed successfully"
        else
          echo "SonarQube analysis failed. Please check the SonarQube server configuration:"
          echo "1. Verify SONAR_HOST_URL is set correctly in repository secrets"
          echo "2. Verify SONAR_TOKEN is valid and has proper permissions"
          echo "3. Check if SonarQube server is accessible"
          exit 1
        fi 