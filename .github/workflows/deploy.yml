name: Deploy

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Install dependencies
        run: mvn install -DskipTests
      
      - name: Run tests & generate coverage report
        run: mvn test jacoco:report
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: target/site/jacoco/
      
      - name: Verify coverage thresholds
        run: |
          # Verify JaCoCo report exists
          if [ ! -f "target/site/jacoco/index.html" ]; then
            echo "::error::JaCoCo report not found from deploy yml. Please ensure tests are running and coverage is being collected."
            exit 1
          fi
          
          # Extract and display coverage information
          echo "::group::Coverage Report"
          echo "=== Package Coverage ==="
          
          # Function to check package coverage
          check_package_coverage() {
            local package=$1
            local threshold=$2
            local coverage=$(grep -A 2 "$package" target/site/jacoco/index.html | grep -oP '\d+\.\d+%' | head -1 | sed 's/%//')
            
            if [ -z "$coverage" ]; then
              echo "::error::Could not find coverage for package: $package"
              return 1
            fi
            
            if (( $(echo "$coverage < $threshold" | bc -l) )); then
              echo "::error::Package $package coverage is below threshold (current: $coverage%, required: $threshold%)"
              return 1
            else
              echo "Package $package: $coverage% (threshold: $threshold%)"
            fi
          }
          
          # Check overall coverage first
          TOTAL_COVERAGE=$(grep -oP 'Total.*?(\d+\.\d+)%' target/site/jacoco/index.html | grep -oP '\d+\.\d+')
          if (( $(echo "$TOTAL_COVERAGE < 80" | bc -l) )); then
            echo "::error::Overall test coverage is below 80% (current: $TOTAL_COVERAGE%)"
            exit 1
          fi
          echo "Overall Coverage: $TOTAL_COVERAGE%"
          
          # Check each package with its specific threshold
          check_package_coverage "com.tradestore.domain.service" 80 || exit 1
          check_package_coverage "com.tradestore.domain.service.impl" 80 || exit 1
          check_package_coverage "com.tradestore.api.controller" 80 || exit 1
          check_package_coverage "com.tradestore.api.mapper" 80 || exit 1
          check_package_coverage "com.tradestore.api.exception" 80 || exit 1
          check_package_coverage "com.tradestore.domain.exception" 70 || exit 1
          check_package_coverage "com.tradestore.infrastructure" 70 || exit 1
          check_package_coverage "com.tradestore" 30 || exit 1
          check_package_coverage "com.tradestore.domain.model" 10 || exit 1
          
          echo "=== Overall Coverage ==="
          grep -A 2 "Total" target/site/jacoco/index.html
          echo "::endgroup::"
      
      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -Ddependency-check.suppressionFiles=owasp-suppressions.xml \
            -Ddependency-check.cveValidForHours=24 \
            -Ddependency-check.skipProvidedScope=true \
            -Ddependency-check.skipRuntimeScope=true \
            -Ddependency-check.skipTestScope=true \
            -Ddependency-check.failBuildOnCVSS=9 \
            -Ddependency-check.retireJsAnalyzerEnabled=false \
            -Ddependency-check.nodeAuditAnalyzerEnabled=false \
            -Ddependency-check.assemblyAnalyzerEnabled=false \
            -Ddependency-check.centralAnalyzerEnabled=true \
            -Ddependency-check.nexusAnalyzerEnabled=false \
            -Ddependency-check.nuspecAnalyzerEnabled=false \
            -Ddependency-check.composerAnalyzerEnabled=false \
            -Ddependency-check.bundleAuditAnalyzerEnabled=false \
            -Ddependency-check.rubygemsAnalyzerEnabled=false \
            -Ddependency-check.cocoapodsAnalyzerEnabled=false \
            -Ddependency-check.swiftPackageManagerAnalyzerEnabled=false \
            -Ddependency-check.centralAnalyzerUseCache=true \
            -Ddependency-check.centralAnalyzerCacheTimeout=600 \
            -Ddependency-check.centralAnalyzerParallelAnalysis=true \
            -Ddependency-check.centralAnalyzerThreadCount=4 \
            -Ddependency-check.centralAnalyzerMaxRetries=3 \
            -Ddependency-check.centralAnalyzerRetryDelay=5000 \
            -Ddependency-check.centralAnalyzerUrl=https://search.maven.org/solrsearch/select
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Generate version
        id: version
        run: echo "VERSION=$(date +'%Y%m%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/trade-store:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/trade-store:${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/trade-store:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/trade-store:buildcache,mode=max
      
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p /opt/trade-store
            
            # Backup current deployment
            if [ -f /opt/trade-store/docker-compose.yml ]; then
              cp /opt/trade-store/docker-compose.yml /opt/trade-store/docker-compose.yml.backup
            fi
            
            # Update docker-compose.yml with new version
            cat > /opt/trade-store/docker-compose.yml << 'EOL'
            version: '3.8'
            services:
              app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/trade-store:${{ steps.version.outputs.VERSION }}
                restart: unless-stopped
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/tradestore
                depends_on:
                  - mongodb
                networks:
                  - trade-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
              
              mongodb:
                image: mongo:latest
                restart: unless-stopped
                volumes:
                  - mongodb_data:/data/db
                networks:
                  - trade-network
                healthcheck:
                  test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
            
            volumes:
              mongodb_data:
            
            networks:
              trade-network:
                driver: bridge
            EOL
            
            # Pull new images and start services
            cd /opt/trade-store
            docker-compose pull
            docker-compose up -d
            
            # Wait for health checks
            echo "Waiting for services to be healthy..."
            sleep 30
            
            # Check if deployment was successful
            if ! docker-compose ps | grep -q "healthy"; then
              echo "Deployment failed - rolling back..."
              if [ -f docker-compose.yml.backup ]; then
                mv docker-compose.yml.backup docker-compose.yml
                docker-compose up -d
              fi
              exit 1
            fi
            
            # Cleanup old images
            docker image prune -f 